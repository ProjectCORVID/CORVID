var CORVIDSession = module.exports = function(stream, parserFactory) {
  if (!(this instanceof CORVIDSession))
    return new CORVIDSession(stream, parserFactory);

  this.newline = '\n';
  this.stream = stream;
  this.parser = parserFactory(this);
  this.width = undefined;
  this.height = undefined;

  this.initStream();
}

CORVIDSession.prototype = {
  log: function () {
    var i;

    for (i = 0; i < arguments.length; i++) {
      try {
        str = arguments[i].toString;
        session.writeLine(str);
      } catch (e) {
        console.log('Error trying to log data:', e);
      }
    }
  },

  initStream: function () {
    // Currently assumes telnet socket. Should be made more flexible.
    var socket = this.stream;
    var that = this;

    socket.do.transmit_binary();
    socket.do.window_size();

    socket.on('window_size', function (e) {
      if (e.command == 'sb') {
        this.width = e.width;
        this.height = e.height;
      }
    });

    socket.on('data', function (d) { 
      try {
        that.parser(d);
      } catch (e) {
        console.log('Error receiving data:', e);
      }
    });
  },
  
  write: function (d) {
    this.stream.write(d);
  },

  writeLine: function (l) {
    this.write(l + this.newline);
  },

  writeLines: function (ll) {
    var lines = ll;

    if (typeof ll === 'string')
      lines = Array.prototype.slice.apply(arguments);

    this.writeLine(lines.join('\n', this.newLine));
  },

  connected: function () {
    var that = this;

    this.writeLines("", "Welcome to CORVID!", "");
  },

  kill: function () {
    this.stream.close();
  },
};

