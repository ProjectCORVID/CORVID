/*

A server creates a session when a new connection comes in. The session object
breaks the binary input into lines and passes those through the user's
interpreter.

public

  .write
  .writeLine
  .writeLines
  .log(...)
    like console.log, but to the stream instead

  .kill

private

  .receiveData(d)
    append data to buffer and process any whole lines present

  .

*/

var CORVIDSession = module.exports = function(stream, user) {
  if (!(this instanceof CORVIDSession))
    return new CORVIDSession(stream, parserFactory);

  this.newline = '\n';
  this.width = undefined;
  this.height = undefined;
  this.buffer = '';

  this.stream = stream;
  this.user = user;

  initStream(stream);
}

CORVIDSession.prototype = {
  log: function () {
    var i;

    for (i = 0; i < arguments.length; i++) {
      try {
        str = arguments[i].toString;
        session.writeLine(str);
      } catch (e) {
        console.log('Error trying to log data:', e);
      }
    }
  },

  receiveData: function (d) {
    var lines;

    this.buffer = this.buffer + d;
    this.processLines();
  },

  processLines: function () {
    var line, idx, that = this;

    if (idx = this.buffer.indexOf(this.newline) > -1) {
      line = this.buffer.substr(0, idx);
      this.buffer = this.buffer.substr(idx + this.newline.length);

      if (this.buffer)
        setImmediate(function () {
            that.processLines();
          });

      try {
        this.processLine(l);
      } catch (e) {
      }
    }

    lines = this.buffer.split(this.newline);

    if (d[d.length-1] === this.newline) {
      this.buffer = '';
    } else {
      this.buffer = lines.pop();
    }

    lines.forEach(function (l) {
      this.receiveCommand(l);
    });
  },

  receiveCommand: function (l) {
    try {
      this.user.commandHandler.receiveCommand(l);
    } catch (e) {
      console.log('Error receiving command: ', e);
    }
  }),

  write: function (d) {
    this.stream.write(d);
  },

  writeLine: function (l) {
    this.write(l + this.newline);
  },

  writeLines: function (ll) {
    var lines = ll;

    if (typeof ll === 'string')
      lines = Array.prototype.slice.apply(arguments);

    this.writeLine(lines.join('\n', this.newLine));
  },

  connected: function () {
    this.writeLines("", "Welcome to CORVID!", "");
  },

  kill: function () {
    this.stream.close();
  },

  resize: function (e) {
    if (e.command == 'sb') {
      session.width = e.width;
      session.height = e.height;
    }
  },
};

function initStream(session) {
  // Currently assumes telnet socket. Should be made more flexible.
  var socket = session.stream;

  socket.do.transmit_binary();
  socket.do.window_size();

  socket.on('window_size', function (e) {
    session.resize(e);
  });

  socket.on('data', function (d) {
    session.receiveData(d);
  });
}
