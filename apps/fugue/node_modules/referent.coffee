module.exports =
  class Referent
    constructor: (@db) ->
      @id = makeId()
      @as = {}

      @db.registerRef this

    addBehavior: (behavior, name = behavior.name) ->
      if util.isFunction name
        name = name()

      self = euclidic: this
      Object.setPrototypeOf self, behavior
      @behaviors[behavior.id] = self

      if name
        @as[behavior.name] = self

      behavior.as.behavior.init self

    delBehavior: (behavior) -> delete @behaviors[behavior.id]

    withBehavior: (behavior, methodName, args) ->
      self = @behaviors[behavior.id]
      method = behavior.methods[methodName]
      method.call self, args
